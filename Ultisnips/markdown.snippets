snippet ,i "Italic text" wA
*$1*
endsnippet
	
snippet ,b "Bold text" wA
**$1**
endsnippet

snippet ,bi "Bold italic text" wA
***$1***
endsnippet
	
snippet ,d "Delete line" wA
~~$1~~
endsnippet

snippet ul "Underline"
<u>$1</u>
endsnippet
	
snippet today "Date"
`date +%F`
endsnippet	

snippet code "Code Block"
\`\`\`${1}
${2:content}
\`\`\`
endsnippet
	
snippet bbrace "big bracket"
\left\{ ${1} \right\}
endsnippet

snippet Lfa "Leftrightarrow"
\Leftrightarrow
endsnippet

snippet La "Leftarrow"
\Leftarrow
endsnippet

snippet Ra "Rightarrow"
\Rightarrow
endsnippet

snippet lfa "leftrightarrow"
\leftrightarrow
endsnippet

snippet la "leftarrow"
\leftarrow
endsnippet

snippet ra "rightarrow"
\rightarrow
endsnippet

snippet lla "longleftarrow"
\longleftarrow
endsnippet

snippet lra "longrightarrow"
\longrightarrow
endsnippet

snippet llra "longleftrightarrow"
\longleftrightarrow
endsnippet

snippet Lla "Longleftarrow"
\Longleftarrow
endsnippet

snippet Lra "Longrightarrow"
\Longrightarrow
endsnippet

snippet Llra "Longleftrightarrow"
\Longleftrightarrow
endsnippet

snippet c. "cdots ···"
\cdots
endsnippet

snippet l. "ldots ..."
\ldots
endsnippet

snippet c "cdot ·"
\cdot
endsnippet

snippet br "<br> line feed"
<br>
endsnippet

snippet x "times x"
\times
endsnippet

snippet because "\because" b
\because
endsnippet

snippet therefore "\therefore" b
\therefore
endsnippet

snippet ift "\infty" b
\infty
endsnippet

# Mathjax snippets

# snippet box "Box"
# `!p snip.rv = '┌' + '─' * (len(t[1]) + 1) + '┐'`
# │ $1 │
# `!p snip.rv = '└' + '─' * (len(t[1]) + 1) + '┘'`
# $0
# endsnippet

snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

snippet td "superscript" iA
^{$1}$0
endsnippet

# snippet / "Fraction" iA
# \\frac{${VISUAL}}{$1}$0
# endsnippet

snippet // "Fraction" iA
\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet
snippet \{ "mathjax {} "
\left\\{$1 \right${2:\\}}$3
endsnippet

snippet \[ "mathjax [] "
\left\\[ ${1} \right${2:\\]}
endsnippet

snippet beg "begin{} / end{}"
\begin{$1}
$0
\end{$1}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet
